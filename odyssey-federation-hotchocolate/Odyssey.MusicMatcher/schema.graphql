schema @link(url: "https:\/\/specs.apollo.dev\/federation\/v2.5", import: [ "@key", "FieldSet" ]) {
  query: Query
  mutation: Mutation
}

type AddItemsToPlaylistPayload {
  "Similar to HTTP status code, represents the status of the mutation."
  code: Int!
  "Indicates whether the mutation was successful."
  success: Boolean!
  "Human-readable message for the UI."
  message: String!
  "The playlist that contains the newly added items."
  playlist: Playlist
}

type Mutation {
  "Add one or more items to a user's playlist."
  addItemsToPlaylist(input: AddItemsToPlaylistInput!): AddItemsToPlaylistPayload!
}

"A curated collection of tracks designed for a specific activity or mood."
type Playlist @key(fields: "id") {
  "The playlist's tracks."
  tracks: [Track!]!
  "The ID for the playlist."
  id: ID!
  "The name of the playlist."
  name: String!
  "Describes the playlist, what to expect and entices the user to listen."
  description: String
}

type Query {
  "Playlists hand-picked to be featured to all users."
  featuredPlaylists: [Playlist!]!
  "Retrieves a specific playlist."
  playlist(id: ID!): Playlist
  _service: _Service!
  _entities(representations: [_Any!]!): [_Entity]!
}

"A single audio file, usually a song."
type Track {
  "The ID for the track."
  id: ID!
  "The name of the track."
  name: String!
  "The track length in milliseconds."
  durationMs: Float!
  "Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown)"
  explicit: Boolean!
  "The URI for the track, usually a Spotify link."
  uri: String!
}

"This type provides a field named sdl: String! which exposes the SDL of the service's schema. This SDL (schema definition language) is a printed version of the service's schema including the annotations of federation directives. This SDL does not include the additions of the federation spec."
type _Service {
  sdl: String!
}

"Union of all types that key directive applied. This information is needed by the Apollo federation gateway."
union _Entity = Playlist

input AddItemsToPlaylistInput {
  "The ID of the playlist."
  playlistId: ID!
  "A comma-separated list of Spotify URIs to add."
  uris: [String!]!
}

"Used to indicate a combination of fields that can be used to uniquely identify and fetch an object or interface."
directive @key(fields: FieldSet! resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @link(url: String! import: [String!]) repeatable on SCHEMA

"Scalar representing a set of fields."
scalar FieldSet

"The _Any scalar is used to pass representations of entities from external services into the root _entities field for execution. Validation of the _Any scalar is done by matching the __typename and @external fields defined in the schema."
scalar _Any